{"version":3,"sources":["logo.svg","components/cardModal.js","components/cardList.js","App.js","serviceWorker.js","index.js","components/restaurant.jpeg"],"names":["module","exports","__webpack_require__","p","CardModal","state","open","source","_this","props","onOpenModal","setState","onCloseModal","priceCheck","price","priceLevel","splitAdress","address","splitted","split","react_default","a","createElement","this","className","onClick","index_es","onClose","showCloseIcon","styles","modal","height","width","borderRadius","boxShadow","padding","center","name","src","tempImage","opening_hours","rating","price_level","href","website","phone_number","React","Component","CardSmall","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","target","cardModal_CardModal","App","data","map","cardList","key","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31ff05e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Modal from 'react-responsive-modal';\r\nimport './card.css';\r\n\r\n//Pixabay doesn't allow hotlinking. So I'm using a placeholder image instead\r\nimport tempImage from './restaurant.jpeg';\r\n\r\nexport default class CardModal extends React.Component {\r\n  state = {\r\n    open: false,\r\n    source: this.props.source\r\n  };\r\n\r\n  onOpenModal = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  onCloseModal = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  priceCheck = (price) => {\r\n    var priceLevel = '';\r\n    switch (price) {\r\ncase 1:\r\npriceLevel ='Low'\r\nbreak;\r\ncase 2:\r\npriceLevel ='Average'\r\nbreak;\r\ncase 3:\r\npriceLevel ='High'\r\nbreak;\r\ndefault:\r\npriceLevel ='N.A.'\r\n}\r\nreturn(priceLevel)\r\n  }\r\n\r\n  splitAdress = (address) => {\r\n    var splitted = address.split(',');\r\n    return(<p>{splitted[0]}<br />{splitted[1]}</p>)\r\n  }\r\n\r\n  render() {\r\n    const { open } = this.state;\r\n    const modalStyles = {\r\n      modal: {\r\n        height: '500px',\r\n        width: '310px',\r\n        borderRadius: '3px',\r\n        boxShadow: '0px 0px 5px 3px #353535',\r\n        padding: '0'\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <button className='infoButton' onClick={this.onOpenModal}>INFO</button>\r\n        <Modal open={open} onClose={this.onCloseModal} showCloseIcon={false} styles={modalStyles} center>\r\n        <div className='modalContent'>\r\n          <h2 className='modalHeader'>{this.state.source.name}</h2>\r\n          <img className='modalImage' src = { tempImage }/>\r\n          <div className='modalText'>\r\n            <div className='openingHours'>\r\n              {this.state.source.opening_hours[0]}<br />\r\n              {this.state.source.opening_hours[1]}<br />\r\n              {this.state.source.opening_hours[2]}<br />\r\n              {this.state.source.opening_hours[3]}<br />\r\n              {this.state.source.opening_hours[4]}<br />\r\n              {this.state.source.opening_hours[5]}<br />\r\n              {this.state.source.opening_hours[6]}<br />\r\n              {this.state.source.opening_hours[7]}\r\n            </div>\r\n            <div className='info'>\r\n            <p className='cardSmallH2'>Rating: {this.state.source.rating}</p>\r\n            <p className='cardSmallH2'>Price-range: {this.priceCheck(this.state.source.price_level)}</p>\r\n            <p className='cardSmallH3'>{this.splitAdress(this.state.source.address)}</p>\r\n            <a className='cardSmallH4' href={this.state.source.website}>To website</a>\r\n            <p className='cardSmallH4'>{this.state.source.phone_number}</p>\r\n            </div>\r\n          </div>\r\n          <button open={open} className='closeButton' onClick={this.onCloseModal}>CLOSE</button>\r\n        </div>\r\n        </Modal >\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","//jshint esversion:6\r\nimport React, { Component } from 'react';\r\nimport CardModal from './cardModal.js'\r\nimport './card.css';\r\n\r\n\r\n//Pixabay doesn't allow hotlinking. So I'm using a placeholder image instead\r\nimport tempImage from './restaurant.jpeg';\r\n\r\nclass CardSmall extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      target: this.props.source\r\n    }\r\n  }\r\n\r\n  priceCheck = (price) => {\r\n    var priceLevel = '';\r\n    switch (price) {\r\ncase 1:\r\npriceLevel ='Low'\r\nbreak;\r\ncase 2:\r\npriceLevel ='Average'\r\nbreak;\r\ncase 3:\r\npriceLevel ='High'\r\nbreak;\r\ndefault:\r\npriceLevel ='N.A.'\r\n}\r\nreturn(priceLevel)\r\n  }\r\n\r\n  splitAdress = (address) => {\r\n    var splitted = address.split(',');\r\n    return(<p>{splitted[0]}<br />{splitted[1]}</p>)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='cardSmall'>\r\n        <div className='cardSmallImage'><img className='thumbnail' src = { tempImage }/></div>\r\n        <div className='cardSmallText'>\r\n          <div className='cardSmallHeader'><h2>{ this.state.target.name }</h2></div>\r\n          <div className='cardSmallPar'>\r\n            <p className='cardSmallH3'>Rating: {this.state.target.rating}</p>\r\n            <p className='cardSmallH3'>Price-range: {this.priceCheck(this.state.target.price_level)}</p>\r\n            <p className='cardSmallH3'>{this.splitAdress(this.state.target.address)}</p>\r\n            <a className='cardSmallH4' href={this.state.target.website}>To website</a>\r\n            <p className='cardSmallH4'>{this.state.target.phone_number}</p>\r\n          </div>\r\n          <CardModal source={this.state.target} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CardSmall;\r\n// <button onClick = { this.openCard } >info</button>\r\n","//jshint esversion:6\r\nimport React, {\r\n  Component\r\n} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport CardSmall from \"./components/cardList.js\";\r\nimport data from './db.json';\r\n\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className = \"App\">\r\n        <div>\r\n        {\r\n          data.map((source) => {\r\n            return <CardSmall source={source} key={source.id}/>\r\n          })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/restaurant.e8c28c46.jpeg\";"],"sourceRoot":""}